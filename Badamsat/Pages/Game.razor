@page "/game/{username}"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@using Badamsat
@implements IAsyncDisposable
@using System;

<PageTitle>Badam Sat!</PageTitle>

@if (gameRunning is not null)
{
    @if (gameRunning.state == Badamsat.Game.State.GettingPlayers)
    {
        <Waiting userID=@userID usernames=@gameRunning.usernames e="@StartGame" @bind-showScores="@showScores"></Waiting>
    }
    @if (gameRunning.state == Badamsat.Game.State.Running)
    {
        <div class="playertab">
            <HandView 
                hand=gameRunning.hands[userID] 
                isMain=@true
                active=@(gameRunning.currentPlayerNum == userID) 
                username=@gameRunning.usernames[userID] />
        </div>
        <div class="playertab">
        @for (int i = userID + 1; i < gameRunning.hands.Count; i++)
        {
            <HandView 
                hand=gameRunning.hands[i] 
                isMain=@false
                active=@(i == gameRunning.currentPlayerNum) 
                username=@gameRunning.usernames[i]/>
        }
        @for (int i = 0; i < userID; i++)
        {
            <HandView 
                hand=gameRunning.hands[i] 
                isMain=@false
                active=@(i == gameRunning.currentPlayerNum) 
                username=@gameRunning.usernames[i]/>
        }
        </div>
        <div class="straightline"></div>
        <div class="piles">
        <button class=@PassButtonClass() @onclick="ToggleAutoPlaying">Auto-Playing : @autoPlaying</button>

        @for (int i = 0; i < gameRunning.piles.Count; i++)
        {
            <PileView 
                pile=gameRunning.piles[i] 
                active=@(clickedCard is not null && gameRunning.AvailablePlays(userID)[(int)clickedCard].Contains(i)) 
                index=@i 
                OnClickCallback="@ChoosePile" 
                clickable=@CanClickPile(i, clickedCard) 
                clicked=@false/>
        }
        @if (gameRunning.piles.Count < gameRunning.numDecks * 4)
        {
            <PileView 
                pile=@(new Badamsat.Pile()) 
                active=@(clickedCard is not null && gameRunning.AvailablePlays(userID)[(int)clickedCard].Contains(gameRunning.piles.Count)) 
                index=@(gameRunning.piles.Count) 
                OnClickCallback="@ChoosePile" 
                clickable=@CanClickPile(gameRunning.piles.Count, clickedCard) 
                clicked=@false/>
        }
        @if (active && !gameRunning.HasPlays(this.userID))
        {
            <button class=@PassButtonClass() @onclick="Pass">@RandomPass(gameRunning)</button>
        }
        </div>
        <div class="straightline"></div>
        @if (userID < gameRunning.hands.Count)
        {
            <div class="Hand">
            @for (int i = 0; i < gameRunning.hands.ElementAt(userID).cards.Count; i++)
            {
                <CardView 
                    card=gameRunning.hands.ElementAt(userID).cards[i] 
                    index=@i 
                    active=@(gameRunning.AvailablePlays(userID)[i].Count > 0 && i != clickedCard && gameRunning.currentPlayerNum == userID) 
                    OnClickCallback="@ChooseCard" 
                    clickable=@CanClickCard(i) 
                    clicked=@(i == clickedCard)/>
            }    
            </div>
        }
        <div class="straightline"></div>
        <LastPlays gameRunning=gameRunning />
    }
}

@code {
    [Parameter]
    public string username { get; set; }
    public int userID => gameRunning.usernames.IndexOf(username);
    public bool active => userID == gameRunning.currentPlayerNum;
    private HubConnection? hubConnection;
    public Badamsat.Game gameRunning;
    public int? clickedCard;
    public bool clicked = false;
    public bool showScores { get; set; }
    public bool autoPlaying = false;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
        .WithAutomaticReconnect()
        .Build();

        hubConnection.On<string>("UpdateBoard", (encoded) =>
        {
            this.gameRunning = Badamsat.Game.Destringify(encoded);
            showScores = this.gameRunning.showScores;
            if (active && autoPlaying)
            {
                var plays = gameRunning.AvailablePlays(userID);
                for (int CardIndex = 0; CardIndex < plays.Count; CardIndex++)
                {
                    if (plays[CardIndex].Count > 0)
                    {
                        hubConnection.SendAsync("ChoosePlay", plays[CardIndex][0], CardIndex, this.userID);
                        break;
                    }
                }
            }
            StateHasChanged();
        });

        hubConnection.On("EndGame", (string winner) =>
        {
            NavigationManager.NavigateTo($"gameend/{showScores}");
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("JoinGame", username);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task StartGame()
    {
        if (hubConnection is not null)
            await hubConnection.SendAsync("StartGame", showScores);
    }

    private void ChooseCard(int cardIndex)
    {
        clickedCard = cardIndex;
        StateHasChanged();
    }

    private async Task ChoosePile(int pileIndex)
    {
        if (hubConnection is not null && userID == gameRunning.currentPlayerNum)
        {
            await hubConnection.SendAsync("ChoosePlay", pileIndex, this.clickedCard, this.userID);
            this.clickedCard = null;
        }
    }

    private bool CanClickCard(int cardIndex)
    {
        return gameRunning.AvailablePlays(userID)[cardIndex].Count > 0 && gameRunning.currentPlayerNum == userID;
    }

    private bool CanClickPile(int pileIndex, int? cardIndex)
    {
        if (cardIndex is not null && gameRunning.currentPlayerNum == userID)
            return gameRunning.AvailablePlays(userID)[(int)cardIndex].Contains(pileIndex);
        return false;
    }

    private async Task Pass()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("Pass");
        }
    }

    private void ToggleAutoPlaying()
    {
        autoPlaying = !autoPlaying;
    }

    private string PassButtonClass()
    {
        if (active)
            return "passbutton active";
        return "passbutton inactive";
    }

    private string RandomPass(Badamsat.Game inGame)
    {
        var possiblePhrases = new List<string>
        {
            "I implore you to pass",
            "Piss my pass",
            "Pass",
            "Half passt nine",
            "You shall not not pass!"
        };
        return possiblePhrases[new Random().Next(possiblePhrases.Count)];
    }
}
